// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonSRX leftMotor1;
private WPI_TalonSRX leftMotor2;
private MotorControllerGroup mg_left;
private WPI_TalonSRX rightMotor1;
private WPI_TalonSRX rightMotor2;
private MotorControllerGroup mg_right;
private DifferentialDrive dd_drive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
leftMotor1 = new WPI_TalonSRX(2);
 
 

leftMotor2 = new WPI_TalonSRX(4);
 
 
leftMotor2.follow(leftMotor1);
mg_left = new MotorControllerGroup(leftMotor1, leftMotor2  );
 addChild("mg_left",mg_left);
 

rightMotor1 = new WPI_TalonSRX(1);
 
 

rightMotor2 = new WPI_TalonSRX(3);
 
 

mg_right = new MotorControllerGroup(rightMotor1, rightMotor2  );
 addChild("mg_right",mg_right);
 rightMotor2.follow(rightMotor1);

dd_drive = new DifferentialDrive(mg_left, mg_right);
 addChild("dd_drive",dd_drive);
 dd_drive.setSafetyEnabled(true);
dd_drive.setExpiration(0.1);
dd_drive.setMaxOutput(1.0);

mg_left.setInverted(true);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void drive(double left, double right){
        dd_drive.arcadeDrive(left, right);
    }

}

